// node {
//     stage('Checkout') {
//         checkout scm
//     }

//     stage('Build') {
//         mvn 'clean install -DskipTests'
//     }

//     stage('Unit Test') {
//         mvn 'test'
//     }

//     stage('Integration Test') {
//         mvn 'verify -DskipUnitTests -Parq-wildfly-swarm '
//     }
// }

// def mvn(def args) {
//     def mvnHome = tool 'M3'
//     def javaHome = tool 'JDK8'

//     // Apache Maven related side notes:
//     // --batch-mode : recommended in CI to inform maven to not run in interactive mode (less logs)
//     // -V : strongly recommended in CI, will display the JDK and Maven versions in use.
//     //      Very useful to be quickly sure the selected versions were the ones you think.
//     // -U : force maven to update snapshots each time (default : once an hour, makes no sense in CI).
//     // -Dsurefire.useFile=false : useful in CI. Displays test errors in the logs directly (instead of
//     //                            having to crawl the workspace files to see the cause).

//     // Advice: don't define M2_HOME in general. Maven will autodetect its root fine.
//     // See also
//     // https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/maven-and-jdk-specific-version/mavenAndJdkSpecificVersion.groovy
//     withEnv(["JAVA_HOME=${javaHome}", "PATH+MAVEN=${mvnHome}/bin:${env.JAVA_HOME}/bin"]) {
//         sh "${mvnHome}/bin/mvn ${args} --batch-mode -V -U -e -Dsurefire.useFile=false"
//     }
// }
pipeline {
    agent any
    
    tools {
        ant 'AntNew'
        gradle 'GradleNew'
        maven 'M3'
    }
    
    stages {
        stage('Plugin Build') {
            steps {
                script {
                    // Perform the checkout
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: 'https://github.com/Anshika2203/CombinedAllBuilds.git']]
                    ])
                    
                    // Use Maven to build
                    withMaven {
                    sh "mvn clean install\
                        package"
                    }
                    
                    // Use Ant to build
                    withAnt {
                        sh 'ant build'
                    }
                    
                    // Use Gradle to build
                    withGradle {
                        sh 'gradle build'
                    }
                }
            }
        }
        
        stage('ReadWriteFile') {
            steps {
                script {
                    writeFile file: 'output1.txt', text: '''line1 

line2

line3'''
                    readFile file: 'output1.txt'
                }
            }
        }

        stage('DeleteDirStep') {
            steps {
                script {
                    // Create files in target directory
                    sh '''
                      mkdir -p target
                      touch target/file4.txt
                      touch target/file5.txt
                      touch target/file6.txt
                    '''
                    
                    // List files before deletion
                    sh 'ls'
                    
                    // Delete the target directory
                    dir('target') {
                        deleteDir()
                    }
                    
                    // List files after deletion
                    sh 'ls'
                }
            }
        }
        stage('Read json step') {
            steps {
                script {
                    def oldJson = '''{
            "branch":{
                "type-0.2":{"version":"0.2","rc":"1","rel":"1","extras":"1"},
                "type-0.3":{"version":"0.3","rc":"1","rel":"1","extras":"1"}
                }
            }'''
                    def props = readJSON text: oldJson
                    def keyList = props['branch'].keySet()
                    echo "${keyList}"
                }
            }
        }
        
        stage('Read yaml step') {
            steps {
                script {
                    writeFile file: 'test1.yaml', text: '''pipeline:
  identifier: default
  name: default
  orgIdentifier: default
  projectIdentifier: default
  properties:
    ci:
      codebase:false'''
                        
                    datas = readYaml (file: 'test1.yaml')
                }
            }
        }
	
        stage('Code Analysis') {
            environment {
                scannerHome = tool 'Sonar'
            }
            steps {
                script {
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=Jenkins-Sonar \
                            -Dsonar.projectName=Jenkins-Sonar "
                    }
                }
            }
        }
        // SETTINGS DO NOT MATCH CORRECTLY TO IMPLEMENT.
        // stage('Blackduck') {
        //     steps {
        //         synopsys_detect "--blackduck.url=https://harness.app.blackduck.com/ --blackduck.api.token=<BLACKDUCK_API_TOKEN> --detect.project.name=jenkinstestFinal --detect.project.version.name=v1.0"
        //     }
        // }
        
    }
}
